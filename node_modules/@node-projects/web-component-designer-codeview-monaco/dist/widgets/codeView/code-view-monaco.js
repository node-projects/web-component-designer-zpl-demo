import { BaseCustomWebComponentLazyAppend, css, cssFromString, html, TypedEvent } from '@node-projects/base-custom-webcomponent';
import { CommandType } from '@node-projects/web-component-designer';
export class CodeViewMonaco extends BaseCustomWebComponentLazyAppend {
    static monacoLib;
    _disableSelectionAfterSel;
    dispose() {
        this._monacoEditor?.dispose();
    }
    canvasElement;
    elementsToPackages;
    onTextChanged = new TypedEvent();
    language = 'html';
    singleRow = false;
    _theme = 'vs';
    get theme() {
        return this._theme;
    }
    set theme(value) {
        this._theme = value;
        //@ts-ignore
        CodeViewMonaco.monacoLib ??= window.monaco;
        CodeViewMonaco.monacoLib.editor.setTheme(value);
    }
    #code = null;
    get code() {
        if (this._monacoEditor)
            return this._monacoEditor.getModel().getValue();
        return null;
    }
    set code(v) {
        this.#code = v;
        if (this._monacoEditor)
            this._monacoEditor.getModel().setValue(v);
    }
    #readOnly = false;
    get readOnly() {
        return this.#readOnly;
    }
    set readOnly(v) {
        this.#readOnly = v;
        if (this._monacoEditor)
            this._monacoEditor.updateOptions({ readOnly: v });
    }
    static properties = {
        code: String,
        language: String,
        theme: String,
        singleRow: Boolean,
        readOnly: Boolean
    };
    _monacoEditor;
    _editor;
    _instanceServiceContainer;
    _disableSelection;
    _disableSelectionAfterUpd;
    static style = css `
    :host {
      display: block;
      height: 100%;
      width: 100%;
    }
    `;
    static template = html `
      <div id="container" style="overflow: hidden; width: 100%; height: 100%; position: absolute;"></div>
  `;
    executeCommand(command) {
        switch (command.type) {
            case CommandType.undo:
                this._monacoEditor.trigger('source', 'undo', null);
                break;
            case CommandType.redo:
                this._monacoEditor.trigger('source', 'redo', null);
                break;
            case CommandType.copy:
                this._monacoEditor.trigger('source', 'editor.action.clipboardCopyAction', null);
                break;
            case CommandType.paste:
                this._monacoEditor.trigger('source', 'editor.action.clipboardPasteAction', null);
                break;
            case CommandType.cut:
                break;
            case CommandType.delete:
                break;
        }
    }
    canExecuteCommand(command) {
        switch (command.type) {
            case CommandType.undo:
            case CommandType.redo:
            case CommandType.copy:
            case CommandType.paste:
            case CommandType.cut:
            case CommandType.delete:
                return true;
        }
        return false;
    }
    static loadMonacoEditorViaRequire(path = 'node_modules/monaco-editor/min/vs') {
        return new Promise(async (resolve) => {
            //@ts-ignore
            require.config({ paths: { 'vs': path } });
            //@ts-ignore
            require(['vs/editor/editor.main'], () => {
                //@ts-ignore
                CodeViewMonaco.monacoLib = window.monaco;
                resolve();
            });
        });
    }
    static async loadMonacoEditorViaImport() {
        let monaco = await import('monaco-editor');
        CodeViewMonaco.monacoLib = monaco;
    }
    static setMonacoLibrary(monaco) {
        CodeViewMonaco.monacoLib = monaco;
    }
    constructor() {
        super();
        this._restoreCachedInititalValues();
        this.addEventListener("keydown", e => e.stopPropagation());
    }
    async ready() {
        this._parseAttributesToProperties();
        //@ts-ignore
        let style = await import("monaco-editor/min/vs/editor/editor.main.css", { with: { type: 'css' } });
        this.shadowRoot.adoptedStyleSheets = [cssFromString(style), this.constructor.style];
        this._editor = this._getDomElement('container');
        //@ts-ignore
        CodeViewMonaco.monacoLib ??= window.monaco;
        const resizeObserver = new ResizeObserver(() => {
            if (this._editor.offsetWidth > 0) {
                let options = {
                    automaticLayout: true,
                    theme: this._theme,
                    language: this.language,
                    value: this.#code,
                    fixedOverflowWidgets: true,
                    minimap: {
                        size: 'fill'
                    },
                    readOnly: this.#readOnly
                };
                if (this.singleRow) {
                    options.minimap.enabled = false;
                    options.lineNumbers = 'off';
                    options.glyphMargin = false;
                    options.folding = false;
                    options.lineDecorationsWidth = 0;
                    options.lineNumbersMinChars = 0;
                }
                else {
                    options.scrollbar = {};
                    options.scrollbar.useShadows = false;
                    options.scrollbar.verticalHasArrows = true;
                    options.scrollbar.horizontalHasArrows = true;
                    options.scrollbar.vertical = 'visible';
                    options.scrollbar.horizontal = 'visible';
                }
                this._monacoEditor = CodeViewMonaco.monacoLib.editor.create(this._editor, options);
                let selectionTimeout;
                let disableCursorChange;
                let changeContentListener = this._monacoEditor.getModel().onDidChangeContent(e => {
                    if (selectionTimeout) {
                        clearTimeout(selectionTimeout);
                        selectionTimeout = null;
                        this._disableSelection = false;
                    }
                    disableCursorChange = true;
                    setTimeout(() => {
                        disableCursorChange = false;
                    }, 50);
                    this.onTextChanged.emit(this._monacoEditor.getValue());
                    this.dispatchEvent(new CustomEvent('code-changed'));
                });
                this._monacoEditor.onDidChangeModel(e => {
                    changeContentListener.dispose();
                    changeContentListener = this._monacoEditor.getModel().onDidChangeContent(e => {
                        if (selectionTimeout) {
                            clearTimeout(selectionTimeout);
                            selectionTimeout = null;
                            this._disableSelection = false;
                        }
                        disableCursorChange = true;
                        setTimeout(() => {
                            disableCursorChange = false;
                        }, 50);
                        this.onTextChanged.emit(this._monacoEditor.getValue());
                        this.dispatchEvent(new CustomEvent('code-changed'));
                    });
                });
                this._monacoEditor.onDidChangeCursorPosition(e => {
                    const sel = this._monacoEditor.getSelection();
                    const offsetStart = this._monacoEditor.getModel().getOffsetAt(sel.getStartPosition());
                    const offsetEnd = this._monacoEditor.getModel().getOffsetAt(sel.getEndPosition());
                    if (this._instanceServiceContainer && !this._disableSelectionAfterUpd && !this._disableSelectionAfterSel && !disableCursorChange) {
                        this._disableSelection = true;
                        if (selectionTimeout)
                            clearTimeout(selectionTimeout);
                        selectionTimeout = setTimeout(() => {
                            selectionTimeout = null;
                            this._instanceServiceContainer.selectionService.setSelectionByTextRange(offsetStart, offsetEnd);
                            this._disableSelection = false;
                        }, 50);
                    }
                });
                this._monacoEditor.focus();
                resizeObserver.disconnect();
            }
            ;
        });
        resizeObserver.observe(this._editor);
    }
    focusEditor() {
        requestAnimationFrame(() => {
            this.focus();
            if (this._monacoEditor)
                this._monacoEditor.focus();
        });
    }
    activated() {
        if (this._monacoEditor)
            if (this._monacoEditor)
                this._monacoEditor.layout();
    }
    update(code, instanceServiceContainer) {
        this.#code = code;
        this._instanceServiceContainer = instanceServiceContainer;
        if (this._monacoEditor) {
            this._disableSelectionAfterUpd = true;
            if (this._monacoEditor)
                this._monacoEditor.setValue(code);
            CodeViewMonaco.monacoLib.editor.setTheme(this._theme);
            CodeViewMonaco.monacoLib.editor.setModelLanguage(this._monacoEditor.getModel(), this.language);
            this._disableSelectionAfterUpd = false;
        }
    }
    getText() {
        return this._monacoEditor.getValue();
    }
    setSelection(position) {
        if (this._monacoEditor && !this._disableSelection && !this._disableSelectionAfterSel && position) {
            this._disableSelectionAfterSel = true;
            let model = this._monacoEditor.getModel();
            let point1 = model.getPositionAt(position.start);
            let point2 = model.getPositionAt(position.start + position.length);
            setTimeout(() => {
                this._monacoEditor.setSelection({ startLineNumber: point1.lineNumber, startColumn: point1.column, endLineNumber: point2.lineNumber, endColumn: point2.column });
                this._monacoEditor.revealRangeInCenterIfOutsideViewport(new CodeViewMonaco.monacoLib.Range(point1.lineNumber, point1.column, point2.lineNumber, point2.column), 1);
                setTimeout(() => {
                    this._disableSelectionAfterSel = false;
                }, 50);
            }, 50);
        }
    }
}
customElements.define('node-projects-code-view-monaco', CodeViewMonaco);
