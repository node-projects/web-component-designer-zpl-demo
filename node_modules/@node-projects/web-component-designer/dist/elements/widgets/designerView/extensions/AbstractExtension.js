import { AbstractExtensionBase } from "./AbstractExtensionBase.js";
import { OverlayLayer } from './OverlayLayer.js';
export class AbstractExtension extends AbstractExtensionBase {
    extendedItem;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView);
        this.extendedItem = extendedItem;
    }
    remove() {
        this.extensionManager.removeExtensionInstance(this.extendedItem, this);
    }
    createToolbar(template, width, height, overlayLayer = OverlayLayer.Foreground) {
        const element = template.content.cloneNode(true);
        element.querySelectorAll('*').forEach(x => x.onpointerdown = (e) => {
            this.designerCanvas.ignoreEvent(e);
        });
        const foreignObject = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        foreignObject.classList.add('svg-toolbar-container');
        foreignObject.setAttribute('width', '' + width);
        foreignObject.setAttribute('height', '' + height);
        foreignObject.appendChild(element);
        this._addOverlay(foreignObject, overlayLayer);
        foreignObject.updatePosition = (position) => {
            foreignObject.setAttribute('x', '' + position.x);
            foreignObject.setAttribute('y', '' + position.y);
        };
        foreignObject.getById = (id) => {
            return foreignObject.querySelector('#' + id);
        };
        return foreignObject;
    }
}
