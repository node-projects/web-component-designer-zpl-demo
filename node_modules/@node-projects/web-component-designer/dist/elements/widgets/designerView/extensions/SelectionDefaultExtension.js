import { AbstractExtension } from './AbstractExtension.js';
export class SelectionDefaultExtension extends AbstractExtension {
    _line1;
    _line2;
    _line3;
    _line4;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend(cache, event) {
        this.refresh(cache);
    }
    refresh(cache, event) {
        const transformedCornerPoints = this.extendedItem.element.getBoxQuads({ box: 'border', relativeTo: this.designerCanvas.canvas })[0];
        if (!transformedCornerPoints)
            return;
        if (isNaN(transformedCornerPoints.p1.x) || isNaN(transformedCornerPoints.p2.x)) {
            this.remove();
            return;
        }
        if (this._valuesHaveChanges(this.designerCanvas.zoomFactor, transformedCornerPoints.p1.x, transformedCornerPoints.p1.y, transformedCornerPoints.p2.x, transformedCornerPoints.p2.y, transformedCornerPoints.p3.x, transformedCornerPoints.p3.y, transformedCornerPoints.p4.x, transformedCornerPoints.p4.y)) {
            this._line1 = this._drawLine(transformedCornerPoints.p1.x, transformedCornerPoints.p1.y, transformedCornerPoints.p2.x, transformedCornerPoints.p2.y, 'svg-selection', this._line1);
            this._line2 = this._drawLine(transformedCornerPoints.p1.x, transformedCornerPoints.p1.y, transformedCornerPoints.p4.x, transformedCornerPoints.p4.y, 'svg-selection', this._line2);
            this._line3 = this._drawLine(transformedCornerPoints.p2.x, transformedCornerPoints.p2.y, transformedCornerPoints.p3.x, transformedCornerPoints.p3.y, 'svg-selection', this._line3);
            this._line4 = this._drawLine(transformedCornerPoints.p4.x, transformedCornerPoints.p4.y, transformedCornerPoints.p3.x, transformedCornerPoints.p3.y, 'svg-selection', this._line4);
            this._line1.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
            this._line2.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
            this._line3.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
            this._line4.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
        }
    }
    dispose() {
        this._removeAllOverlays();
    }
}
//# sourceMappingURL=SelectionDefaultExtension.js.map